[tool.setuptools]
include-package-data = true

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "sonnia"
version = "0.3.2"
#dynamic = ["version"]
requires-python = ">=3.9"
dependencies = [
    'keras >= 3',
    'matplotlib',
    'olga >= 1.1.3',
    'numpy',
    'pandas',
    'seaborn',
    'scikit-learn',
    'scipy >= 1.10',
    'tensorflow >= 2.16',
    'tqdm',
]
authors = [ {name = "Giulio Isacchini", email = "giulioisac@gmail.com"}]
maintainers = [{name = "Giulio Isacchini", email = "giulioisac@gmail.com"}]
description = 'SoNNia is a Python 3 software developed to infer selection pressures on features of amino acid CDR3 sequences. SoNNia takes as input TCR CDR3 amino acid sequences with  V and J genes. Its output is sequence-level selection factors which indicate how more or less represented this sequence would be in the selected pool as compared to the pre-selected pool. These in turn could be used to calculate the probability of observing any sequence after selection and sample from the selected repertoire.'
readme = "README.md"
license = {file = "LICENSE"}
classifiers=[
            'Development Status :: 3 - Alpha',
            'Intended Audience :: Developers',
            'Intended Audience :: Healthcare Industry',
            'Intended Audience :: Science/Research',
            'Topic :: Scientific/Engineering :: Bio-Informatics',
            'Topic :: Scientific/Engineering :: Physics',
            'Topic :: Scientific/Engineering :: Medical Science Apps.',
            'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
            'Natural Language :: English',
            'Programming Language :: Python :: 3.9',
            'Programming Language :: Python :: 3.10',
            'Programming Language :: Python :: 3.11',
            'Programming Language :: Python :: 3.12',
            ]
             
[project.urls]
Homepage = "https://github.com/statbiophys/soNNia"
Documentation = "https://sonnia.readthedocs.io/en/latest/index.html"

[project.scripts]
sonnia-infer='sonnia.infer:main'
sonnia-generate='sonnia.generate:main'
sonnia-evaluate='sonnia.evaluate:main'

[tool.ruff]
line-length = 88
fix = true
exclude = [
  "__init__.py",
  "examples/"
]

[tool.ruff.lint]
select = [
  "ANN", # flake8-annotations
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "E", # pycodestyle
  "EM", # flake8-errmsg
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "I", # isort
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "PERF", # perflint
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "PYI", # flake8-pyi
  "RUF", # ruff-specific rules
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TD", # flake8-todos
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W", # pycodestyle
]

ignore = [
  "ANN401", # Dynamically typed expressions (Any) are disallowed
  "D401", # Relax NumPy docstring convention: first line should be imperative
  "E501", # Line length regulated by formatter
  "PT011", # pytest.raises is too broad, set match or use a more specific exception
  "PYI041", # Use float instead of int | float
  "RUF022", # `__all__` is not sorted
  "RUF005", # Consider expression instead of concatenation
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  "SIM108", # Use ternary operator
  "SIM114", # Combine `if` branches
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
